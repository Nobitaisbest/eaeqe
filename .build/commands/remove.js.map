{
  "version": 3,
  "sources": ["../../commands/remove.ts"],
  "sourcesContent": ["import { SlashCommandBuilder, CommandInteraction, ChatInputCommandInteraction } from \"discord.js\";\nimport { bot } from \"../index\";\nimport { Song } from \"../structs/Song\";\nimport { i18n } from \"../utils/i18n\";\nimport { canModifyQueue } from \"../utils/queue\";\n\nconst pattern = /^[0-9]{1,2}(\\s*,\\s*[0-9]{1,2})*$/;\n\nexport default {\n  data: new SlashCommandBuilder()\n    .setName(\"remove\")\n    .setDescription(i18n.__(\"remove.description\"))\n    .addStringOption((option) =>\n      option.setName(\"slot\").setDescription(i18n.__(\"remove.description\")).setRequired(true)\n    ),\n  execute(interaction: ChatInputCommandInteraction) {\n    const guildMemer = interaction.guild!.members.cache.get(interaction.user.id);\n    const removeArgs = interaction.options.getString(\"slot\");\n\n    const queue = bot.queues.get(interaction.guild!.id);\n\n    if (!queue)\n      return interaction.reply({ content: i18n.__(\"remove.errorNotQueue\"), ephemeral: true }).catch(console.error);\n\n    if (!canModifyQueue(guildMemer!)) return i18n.__(\"common.errorNotChannel\");\n\n    if (!removeArgs)\n      return interaction.reply({ content: i18n.__mf(\"remove.usageReply\", { prefix: bot.prefix }), ephemeral: true });\n\n    const songs = removeArgs.split(\",\").map((arg: any) => parseInt(arg));\n\n    let removed: Song[] = [];\n\n    if (pattern.test(removeArgs)) {\n      queue.songs = queue.songs.filter((item, index) => {\n        if (songs.find((songIndex: any) => songIndex - 1 === index)) removed.push(item);\n        else return true;\n      });\n\n      interaction.reply(\n        i18n.__mf(\"remove.result\", {\n          title: removed.map((song) => song.title).join(\"\\n\"),\n          author: interaction.user.id\n        })\n      );\n    } else if (!isNaN(+removeArgs) && +removeArgs >= 1 && +removeArgs <= queue.songs.length) {\n      return interaction.reply(\n        i18n.__mf(\"remove.result\", {\n          title: queue.songs.splice(+removeArgs - 1, 1)[0].title,\n          author: interaction.user.id\n        })\n      );\n    } else {\n      return interaction.reply({ content: i18n.__mf(\"remove.usageReply\", { prefix: bot.prefix }) });\n    }\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAqF;AACrF,eAAoB;AAEpB,kBAAqB;AACrB,mBAA+B;AAE/B,MAAM,UAAU;AAEhB,IAAO,iBAAQ;AAAA,EACb,MAAM,IAAI,mCAAoB,EAC3B,QAAQ,QAAQ,EAChB,eAAe,iBAAK,GAAG,oBAAoB,CAAC,EAC5C;AAAA,IAAgB,CAAC,WAChB,OAAO,QAAQ,MAAM,EAAE,eAAe,iBAAK,GAAG,oBAAoB,CAAC,EAAE,YAAY,IAAI;AAAA,EACvF;AAAA,EACF,QAAQ,aAA0C;AAChD,UAAM,aAAa,YAAY,MAAO,QAAQ,MAAM,IAAI,YAAY,KAAK,EAAE;AAC3E,UAAM,aAAa,YAAY,QAAQ,UAAU,MAAM;AAEvD,UAAM,QAAQ,aAAI,OAAO,IAAI,YAAY,MAAO,EAAE;AAElD,QAAI,CAAC;AACH,aAAO,YAAY,MAAM,EAAE,SAAS,iBAAK,GAAG,sBAAsB,GAAG,WAAW,KAAK,CAAC,EAAE,MAAM,QAAQ,KAAK;AAE7G,QAAI,KAAC,6BAAe,UAAW;AAAG,aAAO,iBAAK,GAAG,wBAAwB;AAEzE,QAAI,CAAC;AACH,aAAO,YAAY,MAAM,EAAE,SAAS,iBAAK,KAAK,qBAAqB,EAAE,QAAQ,aAAI,OAAO,CAAC,GAAG,WAAW,KAAK,CAAC;AAE/G,UAAM,QAAQ,WAAW,MAAM,GAAG,EAAE,IAAI,CAAC,QAAa,SAAS,GAAG,CAAC;AAEnE,QAAI,UAAkB,CAAC;AAEvB,QAAI,QAAQ,KAAK,UAAU,GAAG;AAC5B,YAAM,QAAQ,MAAM,MAAM,OAAO,CAAC,MAAM,UAAU;AAChD,YAAI,MAAM,KAAK,CAAC,cAAmB,YAAY,MAAM,KAAK;AAAG,kBAAQ,KAAK,IAAI;AAAA;AACzE,iBAAO;AAAA,MACd,CAAC;AAED,kBAAY;AAAA,QACV,iBAAK,KAAK,iBAAiB;AAAA,UACzB,OAAO,QAAQ,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,KAAK,IAAI;AAAA,UAClD,QAAQ,YAAY,KAAK;AAAA,QAC3B,CAAC;AAAA,MACH;AAAA,IACF,WAAW,CAAC,MAAM,CAAC,UAAU,KAAK,CAAC,cAAc,KAAK,CAAC,cAAc,MAAM,MAAM,QAAQ;AACvF,aAAO,YAAY;AAAA,QACjB,iBAAK,KAAK,iBAAiB;AAAA,UACzB,OAAO,MAAM,MAAM,OAAO,CAAC,aAAa,GAAG,CAAC,EAAE,GAAG;AAAA,UACjD,QAAQ,YAAY,KAAK;AAAA,QAC3B,CAAC;AAAA,MACH;AAAA,IACF,OAAO;AACL,aAAO,YAAY,MAAM,EAAE,SAAS,iBAAK,KAAK,qBAAqB,EAAE,QAAQ,aAAI,OAAO,CAAC,EAAE,CAAC;AAAA,IAC9F;AAAA,EACF;AACF;",
  "names": []
}
