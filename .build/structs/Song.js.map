{
  "version": 3,
  "sources": ["../../structs/Song.ts"],
  "sourcesContent": ["import { AudioResource, createAudioResource, StreamType } from \"@discordjs/voice\";\nimport youtube from \"youtube-sr\";\nimport { getInfo } from \"ytdl-core\";\nimport ytdl from \"ytdl-core-discord\";\nimport { i18n } from \"../utils/i18n\";\nimport { videoPattern, isURL } from \"../utils/patterns\";\n\nexport interface SongData {\n  url: string;\n  title: string;\n  duration: number;\n}\n\nexport class Song {\n  public readonly url: string;\n  public readonly title: string;\n  public readonly duration: number;\n\n  public constructor({ url, title, duration }: SongData) {\n    this.url = url;\n    this.title = title;\n    this.duration = duration;\n  }\n\n  public static async from(url: string = \"\", search: string = \"\") {\n    const isYoutubeUrl = videoPattern.test(url);\n\n    let songInfo;\n\n    if (isYoutubeUrl) {\n      songInfo = await getInfo(url);\n\n      return new this({\n        url: songInfo.videoDetails.video_url,\n        title: songInfo.videoDetails.title,\n        duration: parseInt(songInfo.videoDetails.lengthSeconds)\n      });\n    } else {\n      const result = await youtube.searchOne(search);\n\n      result ? null : console.log(`No results found for ${search}`); // This is for handling the case where no results are found (spotify links for example)\n\n      if (!result) {\n        let err = new Error(`No search results found for ${search}`);\n        err.name = \"NoResults\";\n        if (isURL.test(url)) err.name = \"InvalidURL\";\n\n        throw err;\n      }\n      songInfo = await getInfo(`https://youtube.com/watch?v=${result.id}`);\n\n      return new this({\n        url: songInfo.videoDetails.video_url,\n        title: songInfo.videoDetails.title,\n        duration: parseInt(songInfo.videoDetails.lengthSeconds)\n      });\n    }\n  }\n\n  public async makeResource(): Promise<AudioResource<Song> | void> {\n    let stream;\n\n    let type = this.url.includes(\"youtube.com\") ? StreamType.Opus : StreamType.OggOpus;\n\n    const source = this.url.includes(\"youtube\") ? \"youtube\" : \"soundcloud\";\n\n    if (source === \"youtube\") {\n      stream = await ytdl(this.url, { quality: \"highestaudio\", highWaterMark: 1 << 25 });\n    }\n\n    if (!stream) return;\n\n    return createAudioResource(stream, { metadata: this, inputType: type, inlineVolume: true });\n  }\n\n  public startMessage() {\n    return i18n.__mf(\"play.startedPlaying\", { title: this.title, url: this.url });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA+D;AAC/D,wBAAoB;AACpB,uBAAwB;AACxB,+BAAiB;AACjB,kBAAqB;AACrB,sBAAoC;AAQ7B,MAAM,KAAK;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAET,YAAY,EAAE,KAAK,OAAO,SAAS,GAAa;AACrD,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,aAAoB,KAAK,MAAc,IAAI,SAAiB,IAAI;AAC9D,UAAM,eAAe,6BAAa,KAAK,GAAG;AAE1C,QAAI;AAEJ,QAAI,cAAc;AAChB,iBAAW,UAAM,0BAAQ,GAAG;AAE5B,aAAO,IAAI,KAAK;AAAA,QACd,KAAK,SAAS,aAAa;AAAA,QAC3B,OAAO,SAAS,aAAa;AAAA,QAC7B,UAAU,SAAS,SAAS,aAAa,aAAa;AAAA,MACxD,CAAC;AAAA,IACH,OAAO;AACL,YAAM,SAAS,MAAM,kBAAAA,QAAQ,UAAU,MAAM;AAE7C,eAAS,OAAO,QAAQ,IAAI,wBAAwB,QAAQ;AAE5D,UAAI,CAAC,QAAQ;AACX,YAAI,MAAM,IAAI,MAAM,+BAA+B,QAAQ;AAC3D,YAAI,OAAO;AACX,YAAI,sBAAM,KAAK,GAAG;AAAG,cAAI,OAAO;AAEhC,cAAM;AAAA,MACR;AACA,iBAAW,UAAM,0BAAQ,+BAA+B,OAAO,IAAI;AAEnE,aAAO,IAAI,KAAK;AAAA,QACd,KAAK,SAAS,aAAa;AAAA,QAC3B,OAAO,SAAS,aAAa;AAAA,QAC7B,UAAU,SAAS,SAAS,aAAa,aAAa;AAAA,MACxD,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAa,eAAoD;AAC/D,QAAI;AAEJ,QAAI,OAAO,KAAK,IAAI,SAAS,aAAa,IAAI,wBAAW,OAAO,wBAAW;AAE3E,UAAM,SAAS,KAAK,IAAI,SAAS,SAAS,IAAI,YAAY;AAE1D,QAAI,WAAW,WAAW;AACxB,eAAS,UAAM,yBAAAC,SAAK,KAAK,KAAK,EAAE,SAAS,gBAAgB,eAAe,KAAK,GAAG,CAAC;AAAA,IACnF;AAEA,QAAI,CAAC;AAAQ;AAEb,eAAO,kCAAoB,QAAQ,EAAE,UAAU,MAAM,WAAW,MAAM,cAAc,KAAK,CAAC;AAAA,EAC5F;AAAA,EAEO,eAAe;AACpB,WAAO,iBAAK,KAAK,uBAAuB,EAAE,OAAO,KAAK,OAAO,KAAK,KAAK,IAAI,CAAC;AAAA,EAC9E;AACF;",
  "names": ["youtube", "ytdl"]
}
